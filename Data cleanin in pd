df.drop_duplicates()            #drop duplicates

df = df.drop_duplicates()
df                              #Saves dataframe after dropping duplicates





# Drop a single column (creates a new DataFrame)
df = df.drop(columns="ColumnName")
df

# Drop multiple columns
df = df.drop(columns=["Col1", "Col2"])
df

# Drop in place (modifies df directly)
df.drop(columns="ColumnName", inplace=True)
df


#removing punctuation marks in pandas-anything that is NOT a letter, number, underscore, or whitespace
df["ColumnName"] = df["ColumnName"].str.replace(r'[^\w\s]', '', regex=True)
df




#specific punctuation mark like underscore-you can just target that character directly.
# Remove underscores
df["ColumnName"] = df["ColumnName"].str.replace("_", "", regex=False)

# Remove multiple specific marks
df["Name"] = df["Name"].str.replace(r'[_\d\W]', '', regex=True)

How it works

[_\d\W] means:

_ → underscore

\d → any digit (0–9)

\W → any non-word character (this already removes most punctuation)

Putting them inside [] means “match any one of these characters.”

regex=True tells pandas it’s a regex pattern.
